const audioUtil = {};

/*
	1. obtain an mp4 file
	2. convert it to a base64 string
	3. use this function to compress the base64 string
		audioUtil.compressFromBase64(BASE64_STRING).then(compressed => {
			console.log(compressed);
		});
	4. use the result as input for "decompressToBase64"
*/

audioUtil.compressFromBase64 = (() => {
	async function deflateArrBuff(in_arrBuff) {
		const stream1 = new Blob([in_arrBuff]).stream();
		const stream2 = stream1.pipeThrough(new CompressionStream('deflate'));
		return await new Response(stream2).arrayBuffer();
	}
	async function deflateText(in_text) {
		const originalArrBuff = new TextEncoder().encode(in_text);
		const deflatedArrBuff = await deflateArrBuff(originalArrBuff);
		return String.fromCharCode(...new Uint8Array(deflatedArrBuff));
	}
	return async (in_base64) => {
		return btoa(await deflateText(in_base64));
	}
})();

/*
	1. first, compress the data using "compressFromBase64"
	2. decompress the data using audioUtil.decompressToBase64
		audioUtil.decompressToBase64(COMPRESSED_STRING).then(decompressed => {
			const foo = new Audio('data:audio/mpeg;base64,' + decompressed);
			foo.play();
		});

*/

audioUtil.decompressToBase64 = (() => {
	async function inflateArrBuff(in_arrBuff) {
		const stream1 = new Blob([in_arrBuff]).stream();
		const stream2 = stream1.pipeThrough(new DecompressionStream('deflate'));
		return await new Response(stream2).arrayBuffer();
	}
	async function inflateBase64(in_base64) {
		const bin = atob(in_base64);
		const arr = new Uint8Array(bin.length);
		for (let i = 0; i < bin.length; i++) {
			arr[i] = bin.charCodeAt(i);
		}
		const inflatedArrBuff = await inflateArrBuff(arr.buffer);
		return new TextDecoder().decode(inflatedArrBuff);
	}
	return async (in_base64) => {
		return await inflateBase64(in_base64);
	}
})();

export const MOVED = audioUtil.decompressToBase64('eJzt0jnTqkgYhuEfRNCigBC+zQ4i+5qJC6sim4C/furz1KkJpiac8kwVd9Lp1d0PQkc1AZAWkLorw6tgZ/SlyLCNAVo1EQsX5qEFOtRoV9i/ufh2eBCNaLwo6+WfHwbqBKpUzhZCAn1BGCF2RIi1EG2h3xE5GOHZQqwy3TAfYZZXLNrZIRIQBtGabgLTgHAhqVGLGx07B8mXQUBcdsN72Li+XMYuJjR7vy27oPYtRty4Kj0cx1J3N+jHz/eW53JkyoYVQErBA7wMA9xnu7/bOIq3z0I3Fe5oVu9QSqN8YbZ7bsuEh1pqPCf142kwW4cr0vA4ee3woggv4vSILeWOc5crbRFteWaINFrQYV7I53sa60VyApoZHeEpsJMNGD4XZp8IeYyvejfqUSbXfXVDTcOW1ydJeC2o9wiRVZmmD4V4Pto50KWPH1h1UCR0I0QD7KLd1bY2YQBBGCWxlouXEHZz3z9JW5xOcmQ3G/7hQWu+jpeW4k84tPW6kQtjOegpGvsI9ZLz2OQG5ufnI4mmpfx8Q5lwnLjcuBfhoc2N82kU0H2B9saO6FH/QEFkIaZY1BYAtCK0jUwpznlVZHZzPtT2dsfptZmISSpOR/Dksa4xZf96f1HdyeQln0DAWaFCNQGINuxewmk6GfmkZIt7Cob7u7jzziCWXby5G3MgHKjpfk6DOKtOWnkt9ovyGcz7mS5mq5Y7gu9655JNcrlVX5ZnG32HowbGoQxkTnU3QwRgt5WcvJB/p/RYDz0fi/k4T7JCJeM+9t1k6U+1QQqBM+smNKeSbc28reNdZ6TMbut9/IKhOd5FNjNchFniElcbAM6XU2sG4nFfu+xC2zN2VK6+P3Jx0EjBvLD5D/Xu6ZMv8ucS9UUv4UCpjHtQCzDFcscdz+/jkjwFlxvDJTeOoRIs150VXkty3F+44taQAnOxGHOw2G6DEhIhVc9ABU1TMUKo6H42RQR80+rVjegDyYmYPA5TLm71YjBsn/y1H7ERZzC6coISftpkn8NYqNkQcPCn5YnS0fGM0fBg+vg1StgBH1o/fvtv/7ed/9Y//OoPWq7gd6v/P231f7fV/91W/3db/d9t9X+31f/dVv93W/3fbfV/t9X/5/R/9/8Fg3FQCQ==');

export const ERROR = audioUtil.decompressToBase64('eJzt0smyslgWhuELYrAAAWG4kU2PSA/OUARppD2AcPUZ/6mqUUWOzYzwnazpEys+gLN2RUg5Izm8cScNOWmHxoR1xOL0xJabdrU7mCWVXBaM/UXiGYlbc1EgTigxF75liobJgceqfOHnnNHsjQUgcoy7O4BeRO4W48TO8cMcLtSTn4kf5rI8q0DRNPXS6BIrxITfGO9aQXHnFNlm6E8Sr5kjaWZVi0hiJF4kFDZQNIl/VoWu6ddr67chBZkv2S388Z8YYzflO7LSCYnITaZXWOwFOj+D2reClfpZMOYFIFKLhvEsrPTwxtrNd0dWjzWL6GLRUi8OdQRbWbsbgZB4DwgFI5HNIv+EzNTBgq2+nRh3RnuKjLWUdFJ6lp0j9c1OZ7VPnkdOyoxeGf2qKq/XvKR+XpXYkwJwAoCQoh0hoTc8SwKAQ9w/dn1MJeb16xc1bdLlp0p4E0LsUxsSaVcK1OiKN4fXyCZtag6ew/Zg5r5cBq69c4S5DMki7Pe3WpAKgByfzlvLC+vATGoOQMpt0xtZEaQTsvTX7RZNsiAcYo0liyU76SjP7xTWxfX19vXAD86UO5RH82KXr76NtlAnKBOGKNMKAwBgOeYAjdOh4lKrRHXicNf6iR3Sv37EqLQua3MRGTZidGPSH2hyiChaheGdRZmQeo4ZX2ZBPVsep6qXHqCzXEaMFDmHQJXF9BhlbEhR8rUF0E3JXsmaD9FPXZp11XQFzraNwYkTlyWtVHfuofpxRJ5vWcjHsn3LzlePrIEzUIWkHII0Z0PHIrKip2YAGmK/7Ejk1wRZcVS5pxNrq25JCpX7x++KmnrXA0YpFNVExEYN7APhvqQ6udkjih5b7Xh2GGK40tmS96qoSOtTqm1gk4gNiV7qkxy30Q6Q1bNbOUg7qDeDvaWI2uVORxatpiLjm9LkSgcxsO+vYfsZGulikrgKEzP782EyTTgB+obLo5K2rgBAAHBJd6QHPTTDQLdsR5OsaJVlbyovUhDIamoX/92Pujr8Zq6ocQrBULo3gWrfmLgMc6oRjDL25mif+qTuEuNk5sSYBnDvg5E7NgLQvulSUm/mIPikFwyXQSTdybOjEmF30P18rmZf98mFvUERks1hurbho7ZEUVKdA7hACt5LkPG0X7ZQp8Of1716oVeTA7HJ+yBifnXPxgLpa4CBu3u6am5ju8c4G9zqP34sJ3rNKqvT++twNZuEPuHtwVPAxwBlhCwkN3ExAnfIYT8AnOI3Bmkh2mjzUONZZzypUfZa2g1HJX4DmGPbQk0x2K8pFcZ8vXILewCiGW75aAMZHmjC9eZ+phex94NhTsswY07H2Qys20yNer4AvF3B4OJ4Bl4A4EhLv91uUUdPx2gvnOFh+oPk/fqlBAPCi7miEjl9Ijb9A2HndAjGsV0yH46iJIjcQhUaP4zh5EL3WARiAeJna/zw8LyXPbpkFqJwiYXydQ+ci5y/SyXn0ODlMPrAdCn8AJ1vvgrM0GzuHgp5monVKRiexUZONCr1Orqtxs4pj8KYAMKjysjpxcu4+mH+mdPeB2/RD8LQx/LZ9a3Z8tH665d5zCFJyFenRKgvxLyjT5ZzCv+h/Z9fcxBCSo3+F1n8nk87/66v/7N9/Z/t6/9sX/9n+/o/29f/2b7+z/b1f7av/7N9/f+c/u3+vwAz5Yo+');

export const SHUTTER = audioUtil.decompressToBase64('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');

export const RELEASE = audioUtil.decompressToBase64('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');
